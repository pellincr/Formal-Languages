#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1787 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 3 #"fsm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; TEMPLATE"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; ;f-on-ndfa: ndfa -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; ;Purpose: ???"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; (define (f-on-ndfa ndfa)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";   ;INVENTORY"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";   ;(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 17 3 71
(4
 #";   ;(sm-getalphabet ndfa) -> returns the alphabet of the given mach"
 #"ine"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";   ;(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 17 3 71
(5
 #";   ;(sm-getstart ndfa) -> returns the start state of the given mach"
 #"ine"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";   ;(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";   ...)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";Prove that a regular language is closed under Prefix"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";NDFA EXAMPLES"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-ndfa"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Q-0"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-ndfa"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Q-0"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-ndfa"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Q-0"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"EMP"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";accept-prefixes: ndfa -> ndfa"
0 0 24 29 1 #"\n"
0 0 17 3 69
(6
 #";Purpose: to build an dfa that accepts all Prefixs of the initial df"
 #"a"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 17 3 62
#";The list of all states that have a path to the final state(s)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"pathable-states"
0 0 24 3 2 #" ("
0 0 14 3 14 #"path-to-finish"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sm-getfinals"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 33 #";The list of all reachable states"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 16 #"reachable-states"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-reachable"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-ndfa"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sm-getstates"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"sm-getalphabet"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"sm-getstart"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 15 #"pathable-states"
0 0 24 3 3 #")) "
0 0 14 3 16 #"reachable-states"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"sm-getrules"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";prefix-check: ndfa word -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 69
(7
 #";Purpose: to determine if all prefixes of the given word are accepte"
 #"d"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"accept"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sm-apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"accept"
0 0 24 3 3 #") ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 8 #")))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"prefix-check"
0 0 24 3 2 #" ("
0 0 14 3 15 #"accept-prefixes"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";get-reachable: ndfa-> list-of-states"
0 0 24 29 1 #"\n"
0 0 17 3 91
(8
 #";Purpose: to return the list of reachable states of te given ndfa us"
 #"ing breath-first-search"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(9
 #";ACCUM INV: the accumulator is all of the states that have been reac"
 #"hed so far"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-reachable"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 61
#";reachable: (listof states) (listof states) ->(listof states)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 69
(10
 #";Purpose: to process through the ndfa and return the reachable state"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 52 #";ACCUM INV: the states that have been reached so far"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 9 #"reachable"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"states-left"
0 0 24 3 1 #" "
0 0 14 3 7 #"reached"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 2 #") "
0 0 14 3 7 #"reached"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 17 3 100
(11
 #";neighbors: generates a list of the neighboring states of the first "
 #"of states-left without any state"
) 0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 17 3 39 #";that already exists in the accumulator"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"neighbors"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 7 #"reached"
0 0 24 3 5 #"))) ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sm-getrules"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 9 #"reachable"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"neighbors"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 2 #") "
0 0 14 3 7 #"reached"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"reachable"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 11 #"sm-getstart"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-reachable"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-reachable"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-6"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-reachable"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";path-to-finish: ndfa (listof states)-> (listof states)"
0 0 24 29 1 #"\n"
0 0 17 3 71
(12
 #";Purpose: returns all possible states that can reach the final state"
 #"(s)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"path-to-finish"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 1 #" "
0 0 14 3 12 #"final-states"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 58
#";valid: (listof states) (listof states) -> (listof states)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 70
(13
 #";Purpose: to return the list of states the reach the given final sta"
 #"te"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 53 #";ACCUM INV: the states that can reach the final state"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"valid"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"states-left"
0 0 24 3 1 #" "
0 0 14 3 20 #"current-valid-states"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 2 #") "
0 0 14 3 20 #"current-valid-states"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 6 #"letrec"
0 0 24 3 2 #" ("
0 0 17 3 86
(14
 #";neighbors: the list of neighbors of the first of states-left withou"
 #"t any that already"
) 0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 17 3 25 #";exist in the accumulator"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 9 #"neighbors"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 20 #"current-valid-states"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 27 #"generate-neighbors-reversed"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sm-getrules"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"valid"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"neighbors"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"states-left"
0 0 24 3 2 #") "
0 0 14 3 20 #"current-valid-states"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"final-states"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"valid"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"final-states"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valid"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"final-states"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 14 #"path-to-finish"
0 0 24 3 1 #" "
0 0 14 3 4 #"ndfa"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"final-states"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"path-to-finish"
0 0 24 3 1 #" "
0 0 14 3 17 #"KLEENESTAR-abUaba"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"path-to-finish"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"path-to-finish"
0 0 24 3 1 #" "
0 0 14 3 19 #"KLEENESTAR-abUaba-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Q-4"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-5"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-1"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-2"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-3"
0 0 24 3 1 #" "
0 0 14 3 3 #"Q-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";generate-neighbors: (listof rules) symbol -> (listof-ndfa)"
0 0 24 29 1 #"\n"
0 0 17 3 73
(15
 #";Purpose: to generate the neighbors of the given symbol in the given"
 #" ndfa"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #") ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"generate-neighbors"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(16
 #";generate-neighbors-reversed: (listof rules) state -> (listof states"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";Purose: to generate the list of states that reach a given state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"generate-neighbors-reversed"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";INVENTORY"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getstates ndfa) -> returns the states of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getalphabet ndfa) -> returns the alphabet of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";(sm-getrules ndfa) -> returns the rules of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";(sm-getstart ndfa) -> returns the start state of the given machine"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";(sm-getfinals ndfa) -> returns the final states of the machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 3 #") ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 27 #"generate-neighbors-reversed"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 27 #"generate-neighbors-reversed"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 27 #"generate-neighbors-reversed"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 9         541 21           0 0           0 89 0 17 3 6 #";Proof"
0 0 17 3 1 #" "
0 0 17 3 2 #"by"
0 0 17 3 10 #" induction"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";Prove:"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 7 #"regular"
0 0 17 3 1 #" "
0 0 17 3 8 #"language"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 6 #"closed"
0 0 17 3 1 #" "
0 0 17 3 5 #"under"
0 0 17 3 8 #" Prefix."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";Let"
0 0 17 3 1 #" "
0 0 17 3 1 #"L"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 7 #"regular"
0 0 17 3 1 #" "
0 0 17 3 8 #"language"
0 0 17 3 1 #" "
0 0 17 3 4 #"such"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 1 #"L"
0 0 17 3 1 #" "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"L"
0 0 17 3 1 #"("
0 0 17 3 1 #"M"
0 0 17 3 2 #")."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";Prefix"
0 0 17 3 2 #"(L"
0 0 17 3 3 #") ="
0 0 17 3 2 #" {"
0 0 17 3 33 #"v | w E L and v is a prefix of w}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"Key:"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";Base case: L = e"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";An empty language can only contain words that are ()"
0 0 24 29 1 #"\n"
0 0 17 3 89
(17
 #";any word must be empty and will only have one prefix which is itsel"
 #"f, the empty string e"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(18
 #";the only v must also be empty which will be a prefix of w where w E"
 #" L"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";Assume: Prefix(L) = {v | w E L and v is a prefix of w}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Prove: for some k where k = w"
0 0 24 29 1 #"\n"
0 0 17 3 132
(19
 #";Prefix(L) = {v | k+1 E L and v is a prefix of k+1} where k+1 is a w"
 #"ord that contains k, followed by an extra letter in the alphabet"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";k is a prefix of the word k+1"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";v is known to be a prefix of any word k"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";by definition of a prefix, k would be a prefix of k+1"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";based on what was already assumed, v is known to be a prefix of k"
0 0 24 29 1 #"\n"
0 0 17 3 74
(20
 #";therefore, v is a prefix of a prefix of k+1, so v must be a prefix "
 #"of k+1"
) 0           0 0           0
